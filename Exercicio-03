1. O que é Manipulação de Bits?
Manipulação de bits refere-se ao processo de alterar ou verificar bits individuais dentro de um número binário. Em vez de trabalhar com números inteiros como um todo, você pode manipular seus componentes binários individuais (bits).
Essa técnica é útil para tarefas que exigem controle preciso sobre os dados, como compactação de dados, criptografia e otimização de desempenho.

2. Qual a Importância da Manipulação de Bits?
A importância da manipulação de bits está em sua capacidade de oferecer um controle mais detalhado sobre a forma como os dados são armazenados e processados. Algumas das principais vantagens incluem:
Eficiência: Permite operações mais rápidas e com menor consumo de memória, importante em sistemas embarcados e de baixo nível.
Controle de Hardware: Essencial para a programação de drivers e interfaces com hardware, onde é necessário manipular diretamente os registros de hardware.
Algoritmos Específicos: Usado em algoritmos de criptografia, compressão e outras técnicas que requerem operações bit a bit para maximizar a eficiência.
Economia de Espaço: Permite compactar dados ao usar menos bits para armazenar informações.

3. Quais são as Operações Básicas de Manipulação de Bits?
As operações básicas de manipulação de bits incluem:
AND (&): Realiza uma operação lógica E entre os bits de dois números. O resultado é 1 apenas se ambos os bits forem 1.
OR (|): Realiza uma operação lógica OU entre os bits de dois números. O resultado é 1 se pelo menos um dos bits for 1.
XOR (^): Realiza uma operação lógica OU exclusivo entre os bits de dois números. O resultado é 1 se apenas um dos bits for 1.
NOT (~): Inverte todos os bits de um número. 0 se torna 1 e 1 se torna 0.
Shift Left (<<): Desloca todos os bits para a esquerda, preenchendo os bits à direita com 0. Equivale a multiplicar o número por 2.
Shift Right (>>): Desloca todos os bits para a direita, preenchendo os bits à esquerda com o bit de sinal (para números com sinal) ou com 0 (para números sem sinal). Equivale a dividir o número por 2.

4. Exemplo em Linguagem C. Crie um programa  que exibe os bits de um número e realiza operações básicas:
#include <stdio.h>

// Função para exibir os bits de um número inteiro
void exibirBits(unsigned int n) {
    int i;
    for (i = sizeof(n) * 8 - 1; i >= 0; i--) {
        if (n & (1 << i)) {
            printf("1");
        } else {
            printf("0");
        }
        if (i % 4 == 0) {
            printf(" ");
        }
    }
    printf("\n");
}

int main() {
    unsigned int a = 12;  // 0000 0000 0000 1100
    unsigned int b = 7;   // 0000 0000 0000 0111

    printf("Número A: %d\n", a);
    printf("Número B: %d\n", b);

    printf("Bits de A: ");
    exibirBits(a);

    printf("Bits de B: ");
    exibirBits(b);

    // Operações básicas
    unsigned int andResult = a & b;
    unsigned int orResult = a | b;
    unsigned int xorResult = a ^ b;
    unsigned int notResult = ~a;
    unsigned int shiftLeftResult = a << 2;
    unsigned int shiftRightResult = a >> 2;

    printf("A & B: %d\n", andResult);
    printf("A | B: %d\n", orResult);
    printf("A ^ B: %d\n", xorResult);
    printf("~A: %d\n", notResult);
    printf("A << 2: %d\n", shiftLeftResult);
    printf("A >> 2: %d\n", shiftRightResult);

    printf("Bits de A & B: ");
    exibirBits(andResult);

    printf("Bits de A | B: ");
    exibirBits(orResult);

    printf("Bits de A ^ B: ");
    exibirBits(xorResult);

    printf("Bits de ~A: ");
    exibirBits(notResult);

    printf("Bits de A << 2: ");
    exibirBits(shiftLeftResult);

    printf("Bits de A >> 2: ");
    exibirBits(shiftRightResult);

    return 0;
}
